#!/usr/bin/perl
# Written by Michael Bowling

use Getopt::Std;

$mode = 'tex'; # 'tex' or 'pdftex'

sub try_to_find_file {
    $_ = shift;
    return !(/\#/ || /^\\/);
}

sub find_file_input {
    my $file = shift;

    @exts = ("", ".tex");
    $files = join(" ", map ("$file$_", @exts));

    if (!(($_ = `kpsewhich $files | sort | uniq`) eq "")) {
      s/^\.\///;
      s/\n$//g;
      return $_;
    }

    return "";
}

sub find_file_graphic {
    my $file = shift;

    @exts = ($mode eq 'tex') ? ("", ".eps") : ("", ".pdf", ".jpg", ".png");

    foreach $dir (@graphics_path, "") {
	$d = ($dir eq "") ? "" : "$dir/";

	foreach $ext (@exts) {
	  return "$d$file$ext" if (stat("$d$file$ext"));
	}
    }

    if (0) {
      $files = join(" ", map ("$file$_", @exts));

      if (!(($_ = `kpsewhich $files`) eq "")) {
	s/^\.\///;
	s/\n$//;
	return $_;
      }
    }

    return "";
}

sub find_file_bib {
    my $file = shift;

    if (!($_ = `kpsewhich bibtex $file.bib`) eq "") {
	s/^\.\///;
	s/\n$//;
	return $_;
    }
}

sub default_file_graphic {
    my $file = shift;

    return $file if ($file =~ /(.eps|.pdf)$/);
    return $file . ($mode eq 'tex' ? '.eps' : '.pdf')
}

%input_cache = ();

sub do_input_file {
    my $filename = shift;
    my $t = shift;
    my $prefix = shift;
    my $f;
    my $rv;

    return $input_cache{($mode, $t, $filename)} if exists $input_cache{($mode, $t, $filename)};

    # This avoids any possibility of infinite recursion
    $input_cache{($mode, $t, $filename)} = "";

    if ($opt_R or !try_to_find_file($filename)) {
      $rv = "" ;
    } elsif (($f = find_file_input($filename))) {
      $rv = ((-w "$f") ? "$f " . do_file($f, $prefix) : "");
    } else {
      print STDERR "Warning: Could not find $t, $filename.\n";
      $rv = "";
    }
    $input_cache{($mode, $t, $filename)} = $rv;

}

sub do_file {
    my $filename = shift;
    my $prefix = shift;
    my $deps = "";
    my $fh = $filename;
    my $f, $b;

    print STDERR $prefix . "Processing $filename...\n";

    open($fh, "<$filename");

    while(<$fh>) {

	# Kill Special Comment Disabling
	s/\%maketexdep%//;

	# Kill Comments
	s/\%.*$//;

	# Parse graphics path of graphicx package
	if (/\\graphicspath\{\{([^\}]*)\}\}/) {
	    @graphics_path = $1;
	}

	# Parse class and packages
	if (/\\documentclass\{([^\}]*)\}/ ||
	    /\\documentclass\[[^\]]*\]\{([^\}]*)\}/) {
	    $deps = $deps . do_input_file("$1.cls", "class file", $prefix . "  ");
	}

	if (/\\usepackage\{([^\}]*)\}/ ||
	    /\\usepackage\[[^\]]*\]\{([^\}]*)\}/) {
	  foreach $p (split(/,/,$1)) {
	    $deps = $deps . do_input_file("$p.sty", "package file", $prefix . "  ");
	  }
	}

	# Parse input'd files
	if (/\\input\{([^\}]*)\}/ ||
	    /\\include\{([^\}]*)\}/) {
	    $deps = $deps . do_input_file("$1", "input file", $prefix . "  ");
	}

	# Parse graphics
	if (/\\includegraphics\*?\[[^\]]*\]\{([^\}]*)\}/ ||
	    /\\includegraphics\*?\{([^\}]*)\}/ ||
	    /\\e?psfig\{[^\}]*figure\=([^\}\,]*)[^\}]*\}/) {
	    next if (!try_to_find_file($1));

	    if (($f = find_file_graphic($1))) {
		$deps = $deps . "$f ";
	    } else {
		print STDERR "Warning: Could not find graphics file, $1.  Could be okay.\n";
		$deps = $deps . default_file_graphic($1) . " ";
	    }
	}

	# Parse bibliography
	if (/\\bibliography\{([^\}]*)\}/) {
	    foreach $b (split(',', $1)) {
		if (($f = find_file_bib($b))) {
		    $deps = $deps . "$f ";
		} else {
		    print STDERR "Warning: Could not find bib file, $1.\n";
		}
	    }
	}

    }

    close($fh);

    return $deps;
}

getopts('paPR');

print("# This file is automatically generated by maketexdep.\n");
print("# Any modifications may be lost.\n\n");

@files = @ARGV;

if (!@files) {
    open(CMD, "egrep -l \\documentclass *.tex *.ltx|");
    @files = <CMD>;
    close(CMD);
}

foreach $f (@files) {
    $f =~ s/\n$//;
    $f =~ s/.tex$//;

    if (!$opt_P) {
	$mode = 'tex';
	print("\n$f.dvi:: $f.tex " . do_file("$f.tex", "") . "\n");
    }

    if ($opt_p) {
	$mode = 'pdftex';
	print("\n$f.pdf:: $f.tex " . do_file("$f.tex", "") . "\n");
    }
}

if ($opt_a) {
    foreach $f (@files) {
	!$opt_P && print("\nps:: $f.ps");
	$opt_p && print("\npdf:: $f.pdf");
    }
    print("\n");
}
